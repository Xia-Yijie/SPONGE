/*
设计：夏义杰
因为基本功能的class占用，不能够使用下列的class名：
TITLE FRONT_BOARD BACK_BOARD
TAB TAB_DIV SUB_TAB SUB_TAB_DIV 
INPUTS BUTTON
HINT UP_HINT DOWN_HINT
*/

$(document).ready(

    function()
    {
        /* 各种初始化*/
        initialize()
        tabshow()
        
        /*
        标题部分
        span本身是字，before是底部阴影，after是背后的折纸
        奇数和偶数个数情况不一样
        通过鼠标滑过调用js，使得添加flat的class，进而发生样式的改变
        */
        $('.TITLE').children('span').hover(
            function()
            {
                var $element, index
                $element = $(this)
                index = $element.index() + 1
                $element.addClass('FLAT')
                if (index % 2 === 0) 
                {
                    return $element.prev().addClass('FLAT')
                } 
                else
                {
                    return $element.next().addClass('FLAT')
                }
            },
            function()
            {
                return $('.FLAT').removeClass('FLAT')
            }
        )
        /*
        INPUTS更新后的操作
        */
        $("input.INPUTS").off("change").change(input_change)
        $("select.INPUTS").off("change").change(input_change)
        
        /*
        生成in文件的主要函数
        */
        $("#NEW_IN_FILE").click(
            function()
            {
                $("div.OUTPUT").fadeIn();
                MDIN_CONTENT = generate_mdin(MDIN_CONTENT_OLD)
                $(".OUTPUT div pre").text(MDIN_CONTENT)
            }
        )
        $("#CLOSE_NEW_IN_FILE").click(
            function()
            {
                $("div.OUTPUT").fadeOut();
            }
        )
        $("p.TOOLTIP").each(
            function() 
            {
                let selector = $(".INPUTS[id='"+$(this).attr("for")+"']").parent("div.INPUTS")
                let that = $(this)
                selector.hover(
                    function ()
                    {
                        let offset = $(this).offset()
                        if (that.hasClass("DOWN_HINT"))
                        {
                            offset.top += $(this).height()
                        }
                        else
                        {
                            offset.top -= that.height()
                        }
                        
                        let width = $(this).width() - 40
                        if (that.width() > width)
                        {
                            that.width(width)
                        }

                        that.show()                        
                        that.offset(offset)
                        
                    },
                    function ()
                    {
                        that.hide()
                    }
                )
            }
        )

    }
);

/*
tab部分
初始化勾选
tab是单选框，当tab被激活时显示所有class含有tab的id的tab_div部分和subtab_div部分
每个subtab同理激活所有subtab_div
*/
function initialize()
{
    MDIN_CONTENT_OLD = "Generated By SPONGE Mdin Generator\n"
    MDIN_CONTENT = "Generated By SPONGE\n"
    $("div.OUTPUT").hide()
    $(".FRONT_BOARD input.TAB:first").prop("checked", true)
    $(".FRONT_BOARD input.TAB").each(
        function()
        {
            var selector = ".FRONT_BOARD input.SUB_TAB." + $(this).attr("id") + ":first"
            $(selector).prop("checked", true)
        }
    )
    input_initial()
    var clipboard = new ClipboardJS("#COPY_BUTTON",
    {
        text: function()
        {
            return MDIN_CONTENT
        }
    });
    //让提示框隐藏
    $("p.TOOLTIP").hide()
    //排序
    $("div.SUB_TAB_DIV").each(
        function()
        {
            let temp = $(this).children("[PRIORITY]").toArray().sort(
                function (a,b) 
                {
                    return parseFloat($(b).attr("PRIORITY")) - parseFloat($(a).attr("PRIORITY"))
                }
            )
            $(temp).appendTo(this)
        }
    )
    
}

function tabshow()
{
    var selector, tab
    $(".TAB_DIV").css('display','none')
    tab = $("input.TAB:checked").attr('id')
    selector = ".TAB_DIV." + tab
    $(selector).fadeIn()
    
    $(".SUB_TAB_DIV").css('display','none')
    selector = ".SUB_TAB_DIV." + tab + "." 
    tab = "input.SUB_TAB." + tab + ":checked"
    selector += $(tab).attr('id')
    $(selector).fadeIn()
}

function subtabshow()
{
    var selecter, tab
    tab = $("input.TAB:checked").attr('id')
    $(".SUB_TAB_DIV").css('display','none')
    selector = ".SUB_TAB_DIV." + tab + "." 
    tab = "input.SUB_TAB." + tab + ":checked"
    selector += $(tab).attr('id')
    $(selector).fadeIn()
}

/*
INPUTS更新后的操作
*/
function input_change()
{
    var current_map, current_element, tofind_element
    var value_len, value, prev_element, div_element
    var toshow
    for(let i=0, len=enable_maps.length; i<len; i++)
    {
        toshow = 0
        current_map = enable_maps[i]
        current_element = $("#"+current_map[0])
        prev_element = current_element.prev("label[for='" + current_element.attr("id") + "']")
        div_element = current_element.parent("div.INPUTS")
        tofind_element = $("#"+current_map[1])
        value_len = current_map.length
        if (tofind_element.hasClass("DISABLED"))
        {
            toshow = 0
        }
        else
        {
            for(let j=2; j<value_len; j++)
            {
                value = current_map[j]
                if ( tofind_element.val() == value || (tofind_element.val() != "" && value == "ANY_SET") )
                {
                    toshow = 1
                    break
                }
            }
        }
        if (toshow)
        {
            current_element.fadeIn()
            current_element.removeClass("DISABLED")
            prev_element.fadeIn()
            div_element.fadeIn()
        }
        else
        {
            current_element.addClass("DISABLED")
            current_element.addClass("CURRENT_DISABLED")
            current_element.fadeOut()
            prev_element.fadeOut()
            div_element.fadeOut()
        }
    }
    for(let i=0, len=disable_maps.length; i<len; i++)
    {
        current_map = disable_maps[i]
        current_element = $("#"+current_map[0])
        prev_element = current_element.prev("label[for='" + current_element.attr("id") + "']")
        div_element = current_element.parent("div.INPUTS")
        tofind_element = $("#"+current_map[1])
        value_len = current_map.length
        toshow = 1
        if (tofind_element.hasClass("DISABLED"))
        {
            toshow = 0
        }     
        else
        {
            for(let j=2; j<value_len; j++)
            {
                value = current_map[j]
                if ( tofind_element.val() == value || (tofind_element.val() != "" && value == "ANY_SET") )
                {
                    toshow = 0
                    break
                }
            }
        }
        if (toshow && !(current_element.hasClass("CURRENT_DISABLED")))
        {
            current_element.fadeIn()
            current_element.removeClass("DISABLED")
            prev_element.fadeIn()
            div_element.fadeIn()
        }
        else
        {
            current_element.addClass("DISABLED")
            current_element.fadeOut()
            prev_element.fadeOut()
            div_element.fadeOut()
        }
    }
    for(let i=0, len=enable_maps.length; i<len; i++)
    {
        current_map = enable_maps[i]
        current_element = $("#"+current_map[0])
        current_element.removeClass("CURRENT_DISABLED")
    }
}

/*
初始化时极速完成的，不淡入淡出的，其他和上面的函数效果一样
*/

function input_initial()
{
    var current_map, current_element, tofind_element
    var value_len, value, prev_element, div_element
    var toshow
    for(let i=0, len=enable_maps.length; i<len; i++)
    {
        toshow = 0
        current_map = enable_maps[i]
        current_element = $("#"+current_map[0])
        prev_element = current_element.prev("label[for='" + current_element.attr("id") + "']")
        div_element = current_element.parent("div.INPUTS")
        tofind_element = $("#"+current_map[1])
        value_len = current_map.length
        if (tofind_element.hasClass("DISABLED"))
        {
            toshow = 0
        }
        else
        {
            for(let j=2; j<value_len; j++)
            {
                value = current_map[j]
                if ( tofind_element.val() == value || (tofind_element.val() != "" && value == "ANY_SET") )
                {
                    toshow = 1
                    break
                }
            }
        }
        if (toshow)
        {
            current_element.show()
            current_element.removeClass("DISABLED")
            prev_element.show()
            div_element.show()
        }
        else
        {
            current_element.addClass("DISABLED")
            current_element.addClass("CURRENT_DISABLED")
            current_element.hide()
            prev_element.hide()
            div_element.hide()
        }
    }
    for(let i=0, len=disable_maps.length; i<len; i++)
    {
        current_map = disable_maps[i]
        current_element = $("#"+current_map[0])
        prev_element = current_element.prev("label[for='" + current_element.attr("id") + "']")
        div_element = current_element.parent("div.INPUTS")
        tofind_element = $("#"+current_map[1])
        value_len = current_map.length
        toshow = 1
        if (tofind_element.hasClass("DISABLED"))
        {
            toshow = 0
        }     
        else
        {
            for(let j=2; j<value_len; j++)
            {
                value = current_map[j]
                if ( tofind_element.val() == value || (tofind_element.val() != "" && value == "ANY_SET") )
                {
                    toshow = 0
                    break
                }
            }
        }
        if (toshow && !(current_element.hasClass("CURRENT_DISABLED")))
        {
            current_element.show()
            current_element.removeClass("DISABLED")
            prev_element.show()
            div_element.show()
        }
        else
        {
            current_element.addClass("DISABLED")
            current_element.hide()
            prev_element.hide()
            div_element.hide()
        }
    }
    for(let i=0, len=enable_maps.length; i<len; i++)
    {
        current_map = enable_maps[i]
        current_element = $("#"+current_map[0])
        current_element.removeClass("CURRENT_DISABLED")
    }
}


/*
生成in文件的主要函数
*/
function generate_mdin(test_new)
{
    var temp = test_new
    $("input.INPUTS,select.INPUTS").each(
        function () {
            var name = $(this).attr("id")
            var redifine_index = name.indexOf("_REDEFINE_")
            if (redifine_index >= 0)
            {
                name = name.substring(0, redifine_index)
            }
            
            if (!($(this).hasClass("DISABLED")) && $(this).val() && !($(this).attr("id").match("UNNAME_")))
            {
                temp += "    " + name + " = " + $(this).val() + "\n"
            }
        }
    )
    
    return temp
}